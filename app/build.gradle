apply plugin: 'com.android.application'

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"
    defaultConfig {
        applicationId "com.nm.tinkerdemo"
        minSdkVersion 18
        targetSdkVersion 27
        versionCode 1
        versionName "1.0.0"
        multiDexEnabled true
        buildConfigField "String", "TINKER_ID", "\"${getTinkerIdValue()}\""
    }
    // 忽略方法数限制的检查
    dexOptions {
        jumboMode = true
    }
    //    aaptOptions{
//        cruncherEnabled false
//    }
    signingConfigs {
        release {
            storeFile file("release.keystore")
            storePassword "testres"
            keyAlias "testres"
            keyPassword "testres"
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), project.file('proguard-rules.pro')

        }
        debug {
//            debuggable true
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), project.file('proguard-rules.pro')
        }
    }
    def javaVersion = JavaVersion.VERSION_1_8
    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    productFlavors {
    }
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.1.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    // Tinker
    implementation "com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}"
    annotationProcessor "com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}"
    compileOnly "com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}"
    implementation 'com.android.support:multidex:1.0.3'
}


def bakPath = file("${buildDir}/bakApk/")
ext {
    tinkerEnabled = true
    tinkerOldApkPath = "${bakPath}/app-release-20180614111751.apk"
    tinkerApplyMappingPath = "${bakPath}/aapp-release-20180614111751-mapping.txt"
    tinkerApplyResourcePath = "${bakPath}/app-release-20180614111751-R.txt"
}

def getOldApkPath() {
    return hasProperty("OLD_APK") ? OLD_APK : ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return hasProperty("APPLY_MAPPING") ? APPLY_MAPPING : ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return hasProperty("APPLY_RESOURCE") ? APPLY_RESOURCE : ext.tinkerApplyResourcePath
}

def getTinkerIdValue() {
    return android.defaultConfig.versionName
//    return hasProperty("TINKER_ID") ? TINKER_ID : gitSha()
}

def buildWithTinker() {
    return hasProperty("TINKER_ENABLE") ? Boolean.parseBoolean(TINKER_ENABLE) : ext.tinkerEnabled
}

def getTinkerBuildFlavorDirectory() {
    return ext.tinkerBuildFlavorDirectory
}

if (buildWithTinker()) {
    // tinker Patch插件
    apply plugin: 'com.tencent.tinker.patch'

    tinkerPatch {
        oldApk = getOldApkPath()
        ignoreWarning = false
        useSign = true
        tinkerEnable = buildWithTinker()
        buildConfig {
            applyMapping = getApplyMappingPath()
            applyResourceMapping = getApplyResourceMappingPath()
            tinkerId = getTinkerIdValue()
            keepDexApply = false
            isProtectedApp = false
            supportHotplugComponent = false
        }

        dex {
            dexMode = "jar"
            pattern = ["classes*.dex",
                       "assets/secondary-dex-?.jar"]
            loader = ["com.nm.tinkerdemo.tinker.BaseBuildInfo"]
        }

        lib {
            pattern = ["lib/*/*.so"]
        }

        res {
            pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]
            ignoreChange = ["assets/sample_meta.txt"]
            largeModSize = 100
        }

        packageConfig {
            configField("patchMessage", "tinker is sample to use")
            configField("platform", "all")
            configField("patchVersion", "1.0")
        }

        sevenZip {
            zipArtifact = "com.tencent.mm:SevenZip:1.1.10"
        }
    }

    /**
     * bak apk and mapping
     */
    android.applicationVariants.all { variant ->
        def taskName = variant.name
        def date = new Date().format("yyyyMMddHHmmss")

        tasks.all {
            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

                it.doLast {
                    copy {
                        def fileNamePrefix = "${project.name}-${variant.baseName}"
                        def newFileNamePrefix = "${fileNamePrefix}-${date}"

                        def destPath = bakPath
                        from variant.outputs.first().outputFile
                        into destPath
                        rename { String fileName ->
                            fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                        }

                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                        }

                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                        }
                    }
                }
            }
        }
    }
}

